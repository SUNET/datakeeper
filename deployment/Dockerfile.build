FROM debian:11 AS builder

# Set environment variables to prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install Python, Nuitka, and build dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-pip python3-dev python3-venv build-essential \
    gcc g++ git curl \
    libffi-dev libssl-dev patchelf

# Install Poetry
ENV POETRY_HOME=/opt/poetry
RUN curl -sSL https://install.python-poetry.org | python3 - \
    && ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry
#    && poetry config virtualenvs.create false

# Set Poetry to create virtual environments inside the project
ENV POETRY_VIRTUALENVS_IN_PROJECT=true


# Install Nuitka
RUN python3 -m pip install --no-cache-dir nuitka pyinstaller

# Set working directory
WORKDIR /app

# Clone the repository
RUN git clone --depth=1 https://github.com/SUNET/datakeeper.git .

# Install dependencies with Poetry
RUN poetry install --no-interaction --no-ansi --no-root
RUN poetry env info
RUN poetry run pip list

# Set the virtual environment path
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
# poetry cache clear --all .

# Build the binary using Nuitka
RUN poetry run nuitka --onefile --standalone --python-flag=no_site \
    --output-filename=datakeeper --output-dir=nuitka-build \
    --include-data-file=datakeeper/database/init.sql=datakeeper/database/init.sql \
    --include-data-dir=datakeeper/policy_system/plugins=datakeeper/policy_system/plugins \
    --include-data-file=VERSION=VERSION \
    --remove-output \
    --clean-cache=all \
    main.py

# Move the final binary to a known location
RUN mkdir -p /app/dist
RUN mv nuitka-build/datakeeper /app/dist/datakeeper
# Default command to run the compiled executable
CMD ["./dist/datakeeper"]
