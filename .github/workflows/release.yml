name: Release Datakeeper

on:
  push:
    tags:
    - "v*.*.*"

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        target:
        - { os: "debian", version: "11", python: "3.9" }
        - { os: "debian", version: "12", python: "3.11" }
        - { os: "ubuntu", version: "24.04", python: "3.12" }

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.target.os }}:${{ matrix.target.version }}

    steps:
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y curl build-essential gcc g++ git libffi-dev libssl-dev patchelf python3 python3-dev python3-pip python3-venv

    - name: Debug Python setup
      run: |
        echo "Available Python versions:"
        ls -la /usr/bin/python*
        echo "Python${{ matrix.target.python }} location:"
        which python${{ matrix.target.python }}
        echo "Python${{ matrix.target.python }} version:"
        python${{ matrix.target.python }} --version
        echo "GLIBC version:"
        ldd --version

    - name: Create Python symlinks
      run: |
        # Ensure python3 points to the correct system Python
        ln -sf /usr/bin/python${{ matrix.target.python }} /usr/bin/python3
        ln -sf /usr/bin/python${{ matrix.target.python }} /usr/bin/python
        echo "Python3 now points to:"
        ls -la /usr/bin/python3
        python3 --version

    - name: Checkout repository
      uses: actions/checkout@v4
      env:
        # Force the checkout action to use system git and avoid Python issues
        RUNNER_TEMP: /tmp

    - name: Install Poetry
      run: |
        export POETRY_HOME="/opt/poetry"
        export POETRY_VENV_PATH="/opt/poetry"
        curl -sSL https://install.python-poetry.org | python${{ matrix.target.python }} -
        echo "/opt/poetry/bin" >> $GITHUB_PATH
        export PATH="/opt/poetry/bin:$PATH"
        poetry --version

    - name: Configure Poetry
      run: |
        export PATH="/opt/poetry/bin:$PATH"
        poetry config virtualenvs.in-project true
        poetry config --list

    - name: Install dependencies
      run: |
        export PATH="/opt/poetry/bin:$PATH"
        poetry env use python${{ matrix.target.python }}
        poetry install --no-root
        poetry run python --version
        poetry run pip list

    - name: Build binary with Nuitka
      run: |
        export PATH="/opt/poetry/bin:$PATH"
        poetry run nuitka --onefile --standalone --python-flag=no_site \
          --output-filename=datakeeper-${{ matrix.target.os }}${{ matrix.target.version }}-py${{ matrix.target.python }} \
          --output-dir=nuitka-build \
          --include-data-file=datakeeper/database/init.sql=datakeeper/database/init.sql \
          --include-data-dir=datakeeper/policy_system/plugins=datakeeper/policy_system/plugins \
          --include-data-dir=datakeeper/api/app/static=datakeeper/api/app/static \
          --include-data-dir=datakeeper/api/app/templates=datakeeper/api/app/templates \
          --include-data-file=VERSION=VERSION \
          --remove-output \
          --clean-cache=all \
          main.py

    - name: Verify binary
      run: |
        ls -la nuitka-build/
        file nuitka-build/datakeeper-${{ matrix.target.os }}${{ matrix.target.version }}-py${{ matrix.target.python }}

    - name: Upload binaries to GitHub Releases
      uses: softprops/action-gh-release@v2
      with:
        files: nuitka-build/datakeeper-${{ matrix.target.os }}${{ matrix.target.version }}-py${{ matrix.target.python }}
        body: "ðŸš€ Nuitka release for `${{ matrix.target.os }}:${{ matrix.target.version }}` with Python `${{ matrix.target.python }}`"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
